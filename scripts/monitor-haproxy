#!/bin/bash
#
# Check the status of the haproxy backends every ${INTERVAL} seconds.
#
# Every time a change in status is detected, frontend-config is used to generate
# a new exabgp-announce file for this frontend instance.
#
# The exabgp monitor script will notice this updated status immediately (by watching
# for file change events using inotify) and update it's announcements of this instances
# frontend IP addresses.
#

if [[ ! $HOSTFQDN ]]; then
    echo "$0: ERROR: Environment variable HOSTFQDN not provided"
    exit 1
fi
if [[ ! $INSTANCE ]]; then
    echo "$0: ERROR: Environment variable INSTANCE not provided"
    exit 1
fi

INTERVAL=${INTERVAL-'10'}
STATUSFN=${STATUSFN-'/var/run/haproxy-status'}
OUTFILE=${OUTFILE-"/opt/frontend/monitor/${INSTANCE}/announce"}
STATSSOCKET=${STATSSOCKET-'/var/run/haproxy-control/stats'}

for retry in $(seq 20); do
    if [ -S "${STATSSOCKET}" ]; then
        /opt/frontend/scripts/haproxy-status "$@" > "${STATUSFN}" 2>"${STATUSFN}.stderr"
        head -1 "${STATUSFN}" | grep -qe ^UP -e ^DOWN "${STATUSFN}" && break
        echo "No UP or DOWN status in ${STATUSFN} (attempt ${retry}/20)"
        if [[ $((retry % 9)) == 1 ]]; then
            # help diagnose e.g. permission problems
            echo "haproxy stats-socket and haproxy-status generated output file(s):"
            ls -l "${STATSSOCKET}" "${STATUSFN}" "${STATUSFN}.stderr"
            echo "Current user:"
            id
            test -s "${STATUSFN}" && {
                echo "haproxy-status stdout:"
                cat "${STATUSFN}"
            }
            test -s "${STATUSFN}.stderr" && {
                echo "haproxy-status stderr:"
                cat "${STATUSFN}.stderr"
            }
        fi
    else
        echo "$0: haproxy status socket ${STATSSOCKET} not found (attempt ${retry}/20)"
    fi
    sleep 2
done

test -S "${STATSSOCKET}" || {
    echo "$0: Could not find haproxy status socket ${STATSSOCKET} - is the haproxy container not running?"
    exit 1
}

if [[ ! -s "${STATUSFN}" ]]; then
    echo "$0: Could not get status from ${STATSSOCKET} - exiting"
    exit 1
fi

echo "$0: Startup status is $(head -1 "${STATUSFN}")"

status=$(head -1 "${STATUSFN}" | awk '{print $1}')
/opt/frontend/scripts/frontend-config --fqdn "${HOSTFQDN}" --status "${status}" \
					      --instance "${INSTANCE}" print_exabgp_announce > "${OUTFILE}.new"
mv "${OUTFILE}.new" "${OUTFILE}"
echo "$0: Initial announcements:"
cat "${OUTFILE}"

pid=0

term_handler() {
    echo "$0: Received SIGTERM, shutting down ${pid}"
    if [ $pid -ne 0 ]; then
	kill -SIGTERM "$pid"
	wait "$pid"
    fi
    echo "$0: Changing any 'announce' in ${OUTFILE} to 'withdraw'"
    # Don't do in-place edit since exabgp will pick the change up using inotify move-to event
    sed -e 's/^announce /withdraw /' < "${OUTFILE}" > "${OUTFILE}.new"
    mv "${OUTFILE}.new" "${OUTFILE}"
    exit 143; # 128 + 15 -- SIGTERM
}

trap 'kill ${!}; term_handler' SIGTERM

while true; do
    if [ -S "${STATSSOCKET}" ]; then
	/opt/frontend/scripts/haproxy-status "$@" > "${STATUSFN}.new" 2>"${STATUSFN}.stderr.new"
    else
	echo "$0: haproxy stats socket ${STATSSOCKET} disappeared"
	echo 'UNKNOWN' > "${STATUSFN}.new"
    fi
    changed=0
    cmp --quiet "${STATUSFN}.stderr.new" "${STATUSFN}.stderr" || changed=1
    if [[ $changed == 1 ]]; then
	# Show any changes in backend status
	cat "${STATUSFN}.stderr.new"
	cat "${STATUSFN}.new"
	mv "${STATUSFN}.stderr.new" "${STATUSFN}.stderr"
    fi
    changed=0
    cmp --quiet "${STATUSFN}.new" "${STATUSFN}" || changed=1
    if [[ $changed == 1 || ! -f "${OUTFILE}" ]]; then
	echo "$0: Backend status changed, old: $(cat "${STATUSFN}")"
	echo "$0: Backend status changed, new: $(cat "${STATUSFN}.new")"
	mv "${STATUSFN}.new" "${STATUSFN}"

	status=$(head -1 "${STATUSFN}" | awk '{print $1}')
	/opt/frontend/scripts/frontend-config --fqdn "${HOSTFQDN}" \
					      --status "${status}" \
					      --instance "${INSTANCE}" \
					      print_exabgp_announce > "${OUTFILE}.new"
	mv "${OUTFILE}.new" "${OUTFILE}"
	cat "${OUTFILE}"
    fi

    # Sleep at least one second per round
    spin_control=1

    # Sleep adaptively to wake up once per interval, even if the stuff above takes a little while
    # (this is important since haproxy-status (optionally) forwards stats to a time series database).
    sleep $(( "${INTERVAL}" - "${spin_control}" - $(date +%s) % "${INTERVAL}" )) &
    # Store pid of sleep process in 'pid' before blocking, in case the SIGTERM handler
    # wants to terminate it.
    pid=$!
    wait ${pid}

    sleep ${spin_control}
done

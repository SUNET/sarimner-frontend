#!/bin/bash
#
# Generate haproxy configuration whenever a change to one of the inputs for said
# generation is detected.
#

OUTFILE=${OUTFILE-'/dev/shm/generated.cfg'}
HAPROXY_NEW_CONFIG=${HAPROXY_NEW_CONFIG-'/etc/haproxy/haproxy.cfg'}

rm -f "${HAPROXY_NEW_CONFIG}.new"

pid=0

term_handler() {
    echo "$0: Received SIGTERM, shutting down ${pid}"
    if [ $pid -ne 0 ]; then
	kill -SIGTERM "$pid"
	wait "$pid"
    fi
    exit 143; # 128 + 15 -- SIGTERM
}

trap 'kill ${!}; term_handler' SIGTERM

while [ 1 ]; do
    # Generate new haproxy config from templates and API registered backends information into a staging area
    for retry in $(seq 20); do
        /opt/frontend/scripts/frontend-config $* print_haproxy_config > "${OUTFILE}" 2> "${OUTFILE}.stderr" && break
        echo "Failed generating haproxy configuration from templates and backend info (attempt ${retry}/20)"
        if [[ $((retry % 9)) == 1 ]]; then
            # help diagnose e.g. permission problems
            echo "haproxy config and generated output file(s):"
            ls -l "${HAPROXY_NEW_CONFIG}" "${OUTFILE}" "${OUTFILE}.stderr"
            echo "Current user:"
            id
            test -s "${OUTFILE}" && {
                echo "Top 10 lines of print_haproxy_config stdout:"  # could be whole haproxt config
                head -10 "${OUTFILE}"
            }
            test -s "${OUTFILE}.stderr" && {
                echo "print_haproxy_config stderr:"
                cat "${OUTFILE}.stderr"
            }
        fi
        rm -f "${OUTFILE}" "${OUTFILE}.stderr"
        # spin control
        sleep 1
    done

    if [ ! -s "${OUTFILE}" ]; then
        echo "haproxy config generation failed, giving up"
        exit 1
    fi

    changed=0
    cmp --quiet "${OUTFILE}" "${HAPROXY_NEW_CONFIG}" || changed=1
    if [ $changed -ne 0 ]; then
        # If the config has changed, "move" (really "copy and remove") the file to the output directory but
        # with a temporary name to ensure the next mv will be atomic.
        mv "${OUTFILE}" "${HAPROXY_NEW_CONFIG}.new" && {
	    echo "haproxy config changed:";
	    diff -u "${HAPROXY_NEW_CONFIG}" "${HAPROXY_NEW_CONFIG}.new"
	    # this mv will inotify-trigger the autoreload.sh in the haproxy container to reload haproxy
	    mv "${HAPROXY_NEW_CONFIG}.new" "${HAPROXY_NEW_CONFIG}"
        }
    else
	echo "haproxy config did not change"
    fi

    sleep 1  # spin control

    # The only things volume-mounted into these directories in the container where this runs
    # should be specific to this instance, so we're not triggering off updates to other instances
    inotifywait -q -r -e moved_to -e close_write /opt/frontend/api/backends /opt/frontend/config &
    pid=${!}
    wait $pid
done

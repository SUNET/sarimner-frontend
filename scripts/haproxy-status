#!/usr/bin/env python3
#
# Copyright 2018 SUNET. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without modification, are
# permitted provided that the following conditions are met:
#
#    1. Redistributions of source code must retain the above copyright notice, this list of
#       conditions and the following disclaimer.
#
#    2. Redistributions in binary form must reproduce the above copyright notice, this list
#       of conditions and the following disclaimer in the documentation and/or other materials
#       provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY SUNET ``AS IS'' AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
# FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL SUNET OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# The views and conclusions contained in the software and documentation are those of the
# authors and should not be interpreted as representing official policies, either expressed
# or implied, of SUNET.
#
# Author: Fredrik Thulin <fredrik@thulin.net>
#

"""
Check that haproxy backends are up (up as defined in the 'site' argument string format)
"""
import logging
import os
import sys
from logging.handlers import SysLogHandler

import argparse
import socket
from typing import Iterable, Mapping, Sequence

from haproxy_status.status import HAProxyStatusError, Site, get_status

logger = None

_defaults = {'stats_url': 'http://127.0.0.1:9000/haproxy_stats;csv',
             'syslog': False,
             'debug': False,
             'interface': 'lo',
             'statsd_prefix': 'haproxy',
             }

# Metrics to send along to statsd
statsd_metrics = {
    'bin': ('bytes_in', 'c'),
    'bout': ('bytes_out', 'c'),
    # the average connect time in ms over the 1024 last requests
    'ctime': ('avg_connect_time_1024req', 'ms'),
    # number of requests that encountered an error trying to
    # connect to a backend server. The backend stat is the sum of the stat
    # for all servers of that backend: ('', 'c'), plus any connection errors not
    # associated with a particular server (such as the backend having no
    # active servers).
    'econ': ('connect_errors', 'c'),
    # request errors. Some of the possible causes are:
    # - early termination from the client: ('', 'c'), before the request has been sent.
    # - read error from the client
    # - client timeout
    # - client closed connection
    # - various bad requests from the client.
    # - request was tarpitted.
    'ereq': ('request_errors', 'c'),
    'hrsp_1xx': ('http_response_1xx', 'c'),
    'hrsp_2xx': ('http_response_2xx', 'c'),
    'hrsp_3xx': ('http_response_3xx', 'c'),
    'hrsp_4xx': ('http_response_4xx', 'c'),
    'hrsp_5xx': ('http_response_5xx', 'c'),
    # the average queue time in ms over the 1024 last requests
    'qtime': ('avg_queue_time_1024req', 'ms'),
    # number of sessions per second over last elapsed second
    'rate': ('sessions_1s', 'g'),
    # the average response time in ms over the 1024 last requests (0 for TCP)
    'rtime': ('response_time_1024req', 'ms'),
    # current sessions
    'scur': ('num_sessions', 'g'),
    'smax': ('max_sessions', 'g'),
    # the average total session time in ms over the 1024 last requests
    'ttime': ('total_time_last_1024req', 'ms'),
}


def parse_args(defaults):
    parser = argparse.ArgumentParser(description = 'haproxy status checker',
                                     add_help = True,
                                     formatter_class = argparse.ArgumentDefaultsHelpFormatter,
    )

    parser.add_argument('site',
                        nargs='+',
                        metavar='STR',
                        help='Site to check, in key-value format (e.g. "site=www.dev.eduid.se; min_up=2")',
    )
    parser.add_argument('--debug',
                        dest = 'debug',
                        action = 'store_true', default = defaults['debug'],
                        help = 'Enable debug operation',
    )
    parser.add_argument('--syslog',
                        dest = 'syslog',
                        action = 'store_true', default = defaults['syslog'],
                        help = 'Enable syslog output',
    )
    parser.add_argument('--stats_url',
                        dest = 'stats_url',
                        default = defaults['stats_url'],
                        help = 'haproxy stats URL (CSV format)',
                        metavar = 'URL',
    )
    parser.add_argument('--statsd_host',
                        dest = 'statsd_host',
                        default = None,
                        help = 'Send statistics to statsd host',
                        metavar = 'HOST',
    )
    parser.add_argument('--statsd_prefix',
                        dest = 'statsd_prefix',
                        default = defaults['statsd_prefix'],
                        help = 'Statsd name prefix to use',
                        metavar = 'STR',
    )
    args = parser.parse_args()
    return args


def check_site(site: Site, params: Mapping[str, str]) -> Sequence[str]:
    logger.debug('Processing site {}, params {}'.format(
        site, params))
    #logger.debug('RAW UP:')
    #for this in site.backends_up:
    #    logger.debug('  {}'.format(this))
    #logger.debug('RAW SERVERS:')
    #for this in site.servers:
    #    logger.debug('  {}'.format(this))

    # 'act' in haproxy CSV format is
    #   act [..BS]: number of active servers (backend), server is active (server)
    logger.debug('Backends UP: {}'.format([x.act for x in site.backends_up]))
    up = sum([int(x.act) for x in site.backends_up])
    min_up = params.get('min_up', 1)
    if up < int(min_up):
        logger.debug('Fewer than {} backends up ({})'.format(min_up, up))
        no_check = [x for x in site.servers if x.status == 'no check']
        if len(no_check) == len(site.servers):
            return ['NOCHECK site={}, group={}, backends_up={}'.format(site.site_name, site.group, up)]
        return ['DOWN    site={}, group={}, backends_up={}'.format(site.site_name, site.group, up)]
    return ['UP      site={}, group={}, backends_up={}'.format(site.site_name, site.group, up)]


def send_to_statsd(prefix: str, status: Iterable[Site], host: str, logger: logging.Logger, port: int=8125) -> None:
    while prefix and prefix.endswith('.'):
        prefix=prefix[:1]

    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)

    for site in status:
        data = b''
        count = 0
        for server in site.servers:
            for csv_name, spec in statsd_metrics.items():
                stat_name, stat_type, = spec
                value = getattr(server, csv_name, 0)
                if not value:
                    logger.debug('No value for stat {}/{}'.format(csv_name, stat_name))
                    continue
                value = int(value)
                tags = []
                if '__' in server.pxname:
                    site_name, backend_name, = server.pxname.split('__')
                    tags += ['site=' + site_name,
                             'backend=' + backend_name]
                else:
                    tags += ['site=' + server.pxname]
                tags += ['backend_server=' + server.svname]
                encoded = '{prefix}.{metric_name},{tags}:{value}|{typ}\n'.format(
                    prefix=prefix,
                    metric_name=stat_name,
                    tags=','.join(tags),
                    value=value,
                    typ=stat_type
                ).encode()
                data += encoded
                logger.debug('STAT {} {}'.format(csv_name, encoded))
                count += 1
            logger.debug('Sending {} bytes ({} stats) to {} port {}'.format(len(data), count, host, port))
            sock.sendto(data, (host, port))


def main(myname = 'haproxy-status', args = None, logger_in = None, defaults = None):
    if not args:
        if defaults is None:
            defaults = _defaults
        args = parse_args(defaults)

    global logger
    # initialize various components
    if logger_in:
        logger = logger_in
    else:
        logger = logging.getLogger(myname)
        if args.debug:
            logger.setLevel(logging.DEBUG)
            # log to stderr when debugging
            formatter = logging.Formatter('%(asctime)s %(name)s %(threadName)s: %(levelname)s %(message)s')
            stream_h = logging.StreamHandler(sys.stderr)
            stream_h.setFormatter(formatter)
            logger.addHandler(stream_h)
        if args.syslog:
            syslog_h = SysLogHandler(address='/dev/log')
            formatter = logging.Formatter('%(name)s: %(levelname)s %(message)s')
            syslog_h.setFormatter(formatter)
            logger.addHandler(syslog_h)
        elif not args.debug:
            # log to stdout when not using syslog
            formatter = logging.Formatter('%(levelname)s: %(message)s')
            stream_h = logging.StreamHandler(sys.stdout)
            stream_h.setFormatter(formatter)
            logger.addHandler(stream_h)

    try:
        status = get_status(args.stats_url, logger)
        if args.debug:
            logger.debug('HAProxy status:'.format(status))
            for this in status:
                logger.debug('  {} - {}'.format(this.name, this))
    except HAProxyStatusError as exc:
        logger.error(exc)
        return False

    if not status:
        return False

    output = []
    if args.site[0].lower() == 'all':
        args.site = []
        for this in status:
            params = 'site={}; group={}'.format(this.site_name, this.group)
            if params not in args.site:
                args.site += params
    for this in sorted(args.site):
        params = {}
        if '=' in this:
            # Parse strings such as 'site=www.dev.eduid.se; group=testing'
            for kv in this.split(';'):
                k, v = kv.split('=')
                k = k.strip()
                v = v.strip()
                params[k] = v
        else:
            params = {'site': this}
        logger.debug('Parsed params {}'.format(params))
        site = params['site']
        group = params.get('group', 'default')
        match = [x for x in status if x.site_name == site and x.group == group]
        if not match:
            logger.error('Site {}, group {} not found in haproxy status'.format(site, group))
            logger.debug('Status: {}'.format(status))
            continue
        if len(match) > 1:
            logger.error('More than one Site {} and group {} found in haproxy status'.format(site, group))
            logger.debug('Matches: {}'.format(match))
            continue
        res = check_site(match[0], params)
        if res:
            output += res

    print('\n'.join(output))

    if args.statsd_host and status is not None:
        send_to_statsd(args.statsd_prefix, status, args.statsd_host, logger)

    return output != []


if __name__ == '__main__':
    try:
        progname = os.path.basename(sys.argv[0])
        res = main(progname)
        if res is True:
            sys.exit(0)
        if res is False:
            sys.exit(1)
        sys.exit(int(res))
    except KeyboardInterrupt:
        sys.exit(0)
